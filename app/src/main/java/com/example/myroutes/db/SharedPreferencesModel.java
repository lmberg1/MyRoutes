package com.example.myroutes.db;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;

import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;

import com.example.myroutes.db.entities.WallDataItem;
import com.example.myroutes.util.PreferenceManager;
import com.example.myroutes.util.WallMetadata;

import java.util.Set;

public class SharedPreferencesModel extends AndroidViewModel {
    private static final String TAG = "SharedPreferencesModel";

    // Folder for shared preferences
    private static final String PREFERENCE_FOLDER = "Settings";

    // Preference data
    private String username;         // User's autogenerated username
    private String default_id;       // Id of user's default wall
    private Set<String> wall_ids;    // Set of wall ids user has access to


    public SharedPreferencesModel(@NonNull Application application) {
        super(application);
        SharedPreferences preferences = getSharedPreferences();
        username = PreferenceManager.getUser_id(preferences);
        default_id = PreferenceManager.getDefault_wall(preferences);
        wall_ids = PreferenceManager.getWall_ids(preferences);
    }

    private SharedPreferences getSharedPreferences() {
        return getApplication().getSharedPreferences(PREFERENCE_FOLDER, Context.MODE_PRIVATE);
    }

    public String getUsername() {
        return username;
    }

    public String getDefault_id() {
        return default_id;
    }

    public Set<String> getWall_ids() {
        return wall_ids;
    }

    public WallMetadata getWall_metadata(String wall_id) {
        return PreferenceManager.getWall_metadata(wall_id, getSharedPreferences());
    }

    public void setUsername(String username) {
        assert username != null;
        this.username = username;
        PreferenceManager.setUser_id(username, getSharedPreferences());
    }

    public void setDefault_id(String default_id) {
        if (!hasWall(default_id)) return;
        this.default_id = default_id;
        PreferenceManager.setDefault_wall(default_id, getSharedPreferences());
    }

    public void setWall_metadata(WallMetadata metadata) {
        PreferenceManager.setWall_metadata(metadata, getSharedPreferences());
    }

    public boolean hasWall(String wall_id) {
        return this.wall_ids.contains(wall_id);
    }

    public boolean removeWall(String wall_id) {
        assert wall_id != null;
        if (!hasWall(wall_id)) { return false; }

        // Get the new set of wall ids after removing wall_id
        //Set<String> new_wall_ids = this.wall_ids;
        this.wall_ids.remove(wall_id);

        // Check if we're trying to delete the default wall
        if (default_id.equals(wall_id)) {
            default_id = (wall_ids .size() == 0) ? null : wall_ids.iterator().next();
        }

        // Update value of wall_ids to notify observers that it's changed
        //this.wall_ids.setValue(new_wall_ids);

        // Update shared preferences
        PreferenceManager.removeWall_id(wall_id, getSharedPreferences());
        if (default_id != null) PreferenceManager.setDefault_wall(default_id, getSharedPreferences());
        return false;
    }

    public void addWall(WallDataItem item, PreferenceManager.Role role) {
        String id = item.getWall_id();

        // Get the new set of wall ids after adding wall_id
        //Set<String> new_wall_ids = this.wall_ids;
        this.wall_ids.add(id);

        // Check if there's no default wall set
        if (this.default_id == null) { this.default_id = id; }

        // Update value of wall_ids to notify observers that it's changed
        //this.wall_ids.setValue(new_wall_ids);

        // Update shared preferences
        PreferenceManager.addWall_id(
                new WallMetadata(id, item.getWall_name(), role),
                getSharedPreferences());
    }
}
